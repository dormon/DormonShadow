#if defined(VERTEX_SHADER)
void main(){
  gl_Position = vec4(-1+2*(gl_VertexID/2),-1+2*(gl_VertexID%2),0,1);
}
#endif



#if defined(FRAGMENT_SHADER)
layout(location=0)out vec4 fColor;

layout(binding=1)uniform usampler2D colorTexture;
layout(binding=2)uniform  sampler2D positionTexture;
layout(binding=3)uniform  sampler2D normalTexture;
layout(binding=8)uniform  sampler2D shadowMaskTexture;

ivec2 coord=ivec2(gl_FragCoord.xy);

uniform vec3 cameraPosition = vec3(0);

uniform vec4 lightPosition = vec4(100,100,100,1);
uniform vec3 La = vec3(0.1);//light ambient color
uniform vec3 Ld = vec3(1);//light diffuse color
uniform vec3 Ls = vec3(1);//light specular color

void main(){
  vec3 sum=vec3(0);

  vec3  position    = texelFetch(positionTexture  ,coord,0).xyz;
  vec3  normal      = texelFetch(normalTexture    ,coord,0).xyz;
  float shadowCoef  = texelFetch(shadowMaskTexture,coord,0).x;

  uvec4 color              = texelFetch(colorTexture,coord,0);
  vec3  Ka                 = vec3((color.xyz>>0)&0xff)/0xff;
  vec3  Kd                 = Ka;
  vec3  Ks                 = vec3((color.xyz>>8)&0xff)/0xff;
  float Shininess          = 50;//shininess factor
  float specularFactorCoef = float(color.w)/255.;

  vec3 V = normalize(cameraPosition-position);//view vector
  vec3 L = normalize(lightPosition.xyz-position*lightPosition.w);//light vector
  vec3 R = reflect(-L,normal);//reflected light vector

  float ambientFactor  = 1;
  float diffuseFactor  = max(dot(L,normal),0)*shadowCoef;
  float specularFactor = pow(max(dot(R,V),0),Shininess)*specularFactorCoef*shadowCoef;

  sum+=Ka*La*ambientFactor;
  sum+=Kd*Ld*diffuseFactor;
  sum+=Ks*Ls*specularFactor;

  fColor=vec4(sum,1);//output color
}
#endif
