#pragma once

#include<iostream>

const std::string lineVS=
"#version 450\n"
"layout(location=0)in vec4  color;\n"
"layout(location=1)in vec2  a;\n"
"layout(location=2)in vec2  b;\n"
"layout(location=3)in float width;\n"
"out vec2 vA;\n"
"out vec2 vB;\n"
"out float vWidth;\n"
"out vec4 vColor;\n"
"void main(){\n"
"  vA = a;\n"
"  vB = b;\n"
"  vWidth = width;\n"
"  vColor = color;\n"
"}\n";

const std::string lineGS=
"#version 450\n"
"layout(points)in;\n"
"layout(triangle_strip,max_vertices=4)out;\n"
"uniform mat3 matrix = mat3(1);\n"
"in vec2 vA[];\n"
"in vec2 vB[];\n"
"in float vWidth[];\n"
"in vec4 vColor[];\n"
"out vec4 gColor;\n"
"void main(){\n"
"  vec2 v = vB[0]-vA[0];\n"
"  vec2 s = vA[0];\n"
"  vec2 r = normalize(vec2(-v.y,v.x));\n"
"  float w = vWidth[0];\n"
"  for(int i=0;i<4;++i){\n"
"    vec2 c = (s+v*(i/2)+r*(+1-2*(i%2))*w);\n"
"    gl_Position = vec4((matrix*vec3(c,1)).xy,1,1);\n"
"    gColor = vColor[0];\n"
"    EmitVertex();\n"
"  }\n"
"  EndPrimitive();\n"
"}\n";

const std::string lineFS=
"#version 450\n"
"out vec4 fColor;\n"
"in vec4 gColor;\n"
"void main(){\n"
"  fColor = gColor;\n"
"}\n";

const std::string pointVS=
"#version 450\n"
"layout(location=0)in vec4  color;\n"
"layout(location=1)in vec2  coord;\n"
"layout(location=2)in float size;\n"
"out vec2 vCoord;\n"
"out float vSize;\n"
"out vec4 vColor;\n"
"void main(){\n"
"  vCoord = coord;\n"
"  vSize = size;\n"
"  vColor = color;\n"
"}\n";

const std::string pointGS=
"#version 450\n"
"layout(points)in;\n"
"layout(triangle_strip,max_vertices=4)out;\n"
"uniform mat3 matrix = mat3(1);\n"
"in vec2 vCoord[];\n"
"in float vSize[];\n"
"in vec4 vColor[];\n"
"out vec4 gColor;\n"
"out vec2 gCoord;\n"
"void main(){\n"
"  vec2 s = vCoord[0];\n"
"  float w = vSize[0];\n"
"  for(int i=0;i<4;++i){\n"
"    vec2 c = (s+(vec2(i/2,i%2)*2-1)*w);\n"
"    gl_Position = vec4((matrix*vec3(c,1)).xy,1,1);\n"
"    gColor = vColor[0];\n"
"    gCoord = vec2(i/2,i%2);\n"
"    EmitVertex();\n"
"  }\n"
"  EndPrimitive();\n"
"}\n";

const std::string pointFS=
"#version 450\n"
"out vec4 fColor;\n"
"in vec4 gColor;\n"
"in vec2 gCoord;\n"
"void main(){\n"
"  if(length(gCoord-vec2(0.5))>0.5)discard;\n"
"  fColor = gColor;\n"
"}\n";

const std::string circleVS=
"#version 450\n"
"layout(location=0)in vec4  color;\n"
"layout(location=1)in vec2  coord;\n"
"layout(location=2)in float size;\n"
"layout(location=3)in float width;\n"
"out vec4 vColor;\n"
"out vec2 vCoord;\n"
"out float vSize;\n"
"out float vWidth;\n"
"void main(){\n"
"  vColor = color;\n"
"  vCoord = coord;\n"
"  vSize = size;\n"
"  vWidth = width;\n"
"}\n";

const std::string circleGS=
"#version 450\n"
"layout(points)in;\n"
"layout(triangle_strip,max_vertices=4)out;\n"
"uniform mat3 matrix = mat3(1);\n"
"in vec4 vColor[];\n"
"in vec2 vCoord[];\n"
"in float vSize[];\n"
"in float vWidth[];\n"
"out vec4 gColor;\n"
"out vec2 gCoord;\n"
"out float gMin;\n"
"void main(){\n"
"  vec2 s = vCoord[0];\n"
"  float w = vSize[0];\n"
"  for(int i=0;i<4;++i){\n"
"    vec2 c = (s+(vec2(i/2,i%2)*2-1)*w);\n"
"    gl_Position = vec4((matrix*vec3(c,1)).xy,1,1);\n"
"    gColor = vColor[0];\n"
"    gCoord = vec2(i/2,i%2);\n"
"    gMin = vWidth[0]/w;\n"
"    EmitVertex();\n"
"  }\n"
"  EndPrimitive();\n"
"}\n";

const std::string circleFS=
"#version 450\n"
"out vec4 fColor;\n"
"in vec4 gColor;\n"
"in vec2 gCoord;\n"
"in float gMin;\n"
"void main(){\n"
"  float dist = length(gCoord-vec2(0.5));\n"
"  if(dist>0.5)discard;\n"
"  if(dist<0.5-gMin/2)discard;\n"
"  fColor = gColor;\n"
"}\n";

const std::string triangleVS=
"#version 450\n"
"layout(location=0)in vec4  color;\n"
"layout(location=1)in vec2  coord;\n"
"uniform mat3 matrix = mat3(1);\n"
"out vec4 vColor;\n"
"void main(){\n"
"  gl_Position = vec4((matrix*vec3(coord,1)).xy,1,1);\n"
"  vColor = color;\n"
"}\n";

const std::string triangleFS=
"#version 450\n"
"out vec4 fColor;\n"
"in vec4 vColor;\n"
"void main(){\n"
"  fColor = vColor;\n"
"}\n";

const std::string splineVS=
"#version 450\n"
"layout(location=0)in vec4  color;\n"
"layout(location=1)in vec2  a;\n"
"layout(location=2)in vec2  b;\n"
"layout(location=3)in vec2  c;\n"
"layout(location=4)in vec2  d;\n"
"layout(location=5)in float width;\n"
"out vec2 vA;\n"
"out vec2 vB;\n"
"out vec2 vC;\n"
"out vec2 vD;\n"
"out float vWidth;\n"
"out vec4 vColor;\n"
"void main(){\n"
"  vA = a;\n"
"  vB = b;\n"
"  vC = c;\n"
"  vD = d;\n"
"  vWidth = width;\n"
"  vColor = color;\n"
"}\n";

const std::string splineCS=
"#version 450\n"
"layout(vertices=1)out;\n"
"in vec2 vA[];\n"
"in vec2 vB[];\n"
"in vec2 vC[];\n"
"in vec2 vD[];\n"
"in float vWidth[];\n"
"in vec4 vColor[];\n"
"patch out vec2 cPos[4];\n"
"patch out vec4 cColor;\n"
"patch out float cWidth;\n"
"void main(){\n"
"  cColor = vColor[0];\n"
"  cWidth = vWidth[0];\n"
"  cPos[0] = vA[0];\n"
"  cPos[1] = vB[0];\n"
"  cPos[2] = vC[0];\n"
"  cPos[3] = vD[0];\n"
"  gl_TessLevelInner[1]=64;\n"
"  gl_TessLevelInner[0]=1;\n"
"  gl_TessLevelOuter[1]=64;\n"
"  gl_TessLevelOuter[0]=1;\n"
"  gl_TessLevelOuter[2]=1;\n"
"  gl_TessLevelOuter[3]=1;\n"
"}\n";

const std::string splineES=
"#version 450\n"
"layout(isolines,equal_spacing)in;\n"
"patch in vec2 cPos[4];\n"
"patch in vec4 cColor;\n"
"patch in float cWidth;\n"
"out vec2 eA;\n"
"out float eWidth;\n"
"out vec4 eColor;\n"
"float cattmulrom(float a,float b,float c,float d,float t1){\n"
"  float t2=t1*t1;\n"
"  float t3=t2*t1;\n"
"  return\n"
"    ( -.5*t3 +    t2 - .5*t1 + 0 )*a+\n"
"    ( 1.5*t3 -2.5*t2 + 0     + 1.)*b+\n"
"    (-1.5*t3 +  2*t2 + .5*t1 + 0.)*c+\n"
"    (  .5*t3 - .5*t2 + 0     + 0.)*d;\n"
"}\n"
"void main(){\n"
"  float xx=cattmulrom(cPos[0].x,cPos[1].x,cPos[2].x,cPos[3].x,gl_TessCoord.x);\n"
"  float yy=cattmulrom(cPos[0].y,cPos[1].y,cPos[2].y,cPos[3].y,gl_TessCoord.x);\n"
"  eA = vec2(xx,yy);\n"
"  eWidth = cWidth;\n"
"  eColor = cColor;\n"
"}\n";

const std::string splineGS=
"#version 450\n"
"layout(lines)in;\n"
"layout(triangle_strip,max_vertices=4)out;\n"
"uniform mat3 matrix = mat3(1);\n"
"in vec2 eA[];\n"
"in float eWidth[];\n"
"in vec4 eColor[];\n"
"out vec4 gColor;\n"
"void main(){\n"
"  vec2 v = eA[1]-eA[0];\n"
"  vec2 s = eA[0];\n"
"  vec2 r = normalize(vec2(-v.y,v.x));\n"
"  float w = eWidth[0];\n"
"  for(int i=0;i<4;++i){\n"
"    vec2 c = (s+v*(i/2)+r*(+1-2*(i%2))*w);\n"
"    gl_Position = vec4((matrix*vec3(c,1)).xy,1,1);\n"
"    gColor = eColor[0];\n"
"    EmitVertex();\n"
"  }\n"
"  EndPrimitive();\n"
"}\n";

const std::string splineFS=
"#version 450\n"
"out vec4 fColor;\n"
"in vec4 gColor;\n"
"void main(){\n"
"  fColor = gColor;\n"
"}\n";

const std::string textVS=
"#version 450\n"
"layout(location=0)in vec4  color ;\n"
"layout(location=1)in vec2  pos   ;\n"
"layout(location=2)in vec2  dir   ;\n"
"layout(location=3)in float number;\n"
"layout(location=4)in float char  ;\n"
"layout(location=5)in float size  ;\n"
"out vec4  vColor ;\n"
"out vec2  vPos   ;\n"
"out vec2  vDir   ;\n"
"out float vNumber;\n"
"out float vChar  ;\n"
"out float vSize  ;\n"
"void main(){\n"
"  vColor  = color ;\n"
"  vPos    = pos   ;\n"
"  vDir    = dir   ;\n"
"  vNumber = number;\n"
"  vChar   = char  ;\n"
"  vSize   = size  ;\n"
"}\n";

const std::string textGS=
"#version 450\n"
"layout(points)in;\n"
"layout(triangle_strip,max_vertices=4)out;\n"
"uniform mat3 matrix = mat3(1);\n"
"in vec4  vColor [];\n"
"in vec2  vPos   [];\n"
"in vec2  vDir   [];\n"
"in float vNumber[];\n"
"in float vChar  [];\n"
"in float vSize  [];\n"
"out vec4  gColor;\n"
"out float gChar ;\n"
"out vec2  gCoord;\n"
"void main(){\n"
"  vec2 v = normalize(vDir[0]);\n"
"  vec2 s = vPos[0];\n"
"  vec2 r = normalize(vec2(-v.y,v.x));\n"
"  float w = vSize[0];\n"
"  for(int i=0;i<4;++i){\n"
"    vec2 c = (s+v*(vNumber[0]+i%2)*w+r*(i/2)*w*2);\n"
"    gl_Position = vec4((matrix*vec3(c,1)).xy,1,1);\n"
"    gColor = vColor[0];\n"
"    gChar = vChar[0];\n"
"    gCoord = vec2(i%2,i/2);\n"
"    EmitVertex();\n"
"  }\n"
"  EndPrimitive();\n"
"}\n";

const std::string textFS=
"#version 450\n"
"out vec4 fColor;\n"
"in vec4 gColor;\n"
"in float gChar;\n"
"in vec2 gCoord;\n"
"layout(binding=0)uniform sampler2D fontTexture;\n"
"const uint fontWidth = 1330;\n"
"const uint fontHeight = 28;\n"
"const uint nofCharacters = 95;\n"
"const uint characterWidth = fontWidth/nofCharacters;\n"
"const uint characterHeight = fontHeight;\n"
"const float characterWidthNormalized = 1.f/nofCharacters;\n"
"#define CH_space 32\n"
"float font(int ch,vec2 coord){\n"
"  int id = ch-CH_space;\n"
"  return texture(fontTexture,vec2((id+coord.x)*characterWidthNormalized,coord.y)).r;\n"
"}\n"
"void main(){\n"
"  fColor = vec4(gColor.rgb,font(int(gChar),gCoord));\n"
"}\n";

